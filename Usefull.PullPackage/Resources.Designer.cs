//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Usefull.PullPackage {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Usefull.PullPackage.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The requested assembly &quot;{0}&quot; was not found in the assets..
        /// </summary>
        internal static string AssemblyNotFoundInAssets {
            get {
                return ResourceManager.GetString("AssemblyNotFoundInAssets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The asset object was not found. Pull packages from NuGet repositories before accessing the asset object..
        /// </summary>
        internal static string AssetsNotFound {
            get {
                return ResourceManager.GetString("AssetsNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The directory path is not defined. Use the {0} method to define..
        /// </summary>
        internal static string DirectoryPathNotDefined {
            get {
                return ResourceManager.GetString("DirectoryPathNotDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package with the same identifier is already registered..
        /// </summary>
        internal static string PackageAlreadyRegistered {
            get {
                return ResourceManager.GetString("PackageAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package identifier can not be empty..
        /// </summary>
        internal static string PackageIdentifierCantBeEmpty {
            get {
                return ResourceManager.GetString("PackageIdentifierCantBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A package version can not be empty..
        /// </summary>
        internal static string PackageVersionCantBeEmpty {
            get {
                return ResourceManager.GetString("PackageVersionCantBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A source with the same name is already registered..
        /// </summary>
        internal static string SourceAlreadyRegistered {
            get {
                return ResourceManager.GetString("SourceAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A source name can not be empty..
        /// </summary>
        internal static string SourceNameCantBeEmpty {
            get {
                return ResourceManager.GetString("SourceNameCantBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A source with the same URI is already registered..
        /// </summary>
        internal static string SourceUriAlreadyRegistered {
            get {
                return ResourceManager.GetString("SourceUriAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A source URI can not be empty..
        /// </summary>
        internal static string SourceUriCantBeEmpty {
            get {
                return ResourceManager.GetString("SourceUriCantBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An explicitly created context is not acceptable. Only a context that is returned by either the LoadAll method or the Load method is allowed..
        /// </summary>
        internal static string UnacceptableLoadContext {
            get {
                return ResourceManager.GetString("UnacceptableLoadContext", resourceCulture);
            }
        }
    }
}
